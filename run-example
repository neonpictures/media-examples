#!/usr/bin/env bash
set -eo pipefail
cd "${0%/*}"

declare LOG_ROOT
declare LICENSE_FILE

declare DOCKER_UID=${NORSK_UID:=$(id -u)}
declare DOCKER_GID=${NORSK_GID:=$(id -g)}

declare -r HOST_NAME=$(hostname 2>/dev/null || echo "127.0.0.1")

declare -r CLIENT_HOST_DEFAULT=${HOST_NAME}
declare -r CLIENT_HOST=${CLIENT_HOST:-$CLIENT_HOST_DEFAULT}

declare -r PUBLIC_URL_PREFIX_DEFAULT="http://${CLIENT_HOST}:8080"
declare    PUBLIC_URL_PREFIX=${PUBLIC_URL_PREFIX:-$PUBLIC_URL_PREFIX_DEFAULT}

declare -r DEBUG_URL_PREFIX_DEFAULT="http://${CLIENT_HOST}:6791"
declare -r DEBUG_URL_PREFIX=${DEBUG_URL_PREFIX:-$DEBUG_URL_PREFIX_DEFAULT}

declare -r GRAFANA_URL_DEFAULT="http://${CLIENT_HOST}:3100"
declare -r GRAFANA_URL=${GRAFANA_URL:-$GRAFANA_URL_DEFAULT}

function usage() {
    # TODO :)
    echo "Usage: run-example [options] cmd"
    echo "  Options:"
    echo "    --license-file <license-file> : where on the host to mount the Norsk license file."
    echo "    --log-root <log-dir> : where on the host to mount Norsk's logs.  The actual logs will be in a subdirectory with the name of the example you are running.  Default ./norskLogs"
if [[ "$OSTYPE" == "linux"* ]]; then
    echo "    --network-mode [docker|host] : whether the example should run in host or docker network mode.  Defaults to host"
fi
    echo "    --metrics [true|false] : whether metrics containers are included. Defaults to false"
    echo "    --run-source [true|false] : whether a source (or sources) are automatically started.  Defaults to true"
    echo "    --uid <uid> : the UID to run the as.  Defaults to the current user's UID"
    echo "    --gid <gid> : the GID to run the as.  Defaults to the current user's GID"
    echo "  Commands:"
    echo "    list : List the example names along with a short description of each"
    echo "    start <example-name> : start the named example."
    echo "        The example-name can be full (e.g. 00_hello_norsk), just the number (e.g. 00)"
    echo "        or just the name (e.g. hello_norsk)"
    echo "    stop : Stops all example containers and deletes the associated docker network (if any)"
    echo
    echo "  Environment variables:"
    echo "    LICENSE_FILE - the value of --license-file can alternatively be provided using this environment variable"
    echo "    CLIENT_HOST - adjust the hostname/IP used for public access to this Norsk application. default: 'hostname' ($CLIENT_HOST_DEFAULT)"
    echo "    PUBLIC_URL_PREFIX - adjust the prefix applied to displayed public URLs (playlists etc). default: $PUBLIC_URL_PREFIX_DEFAULT"
    echo "    DEBUG_URL_PREFIX - adjust the prefix applied to displayed debug URLs (visualiser etc). default: $DEBUG_URL_PREFIX_DEFAULT"
    echo "    NORSK_UID - the value of --uid can alternatively be provided using this environment variable"
    echo "    NORSK_GID - the value of --gid can alternatively be provided using this environment variable"
    echo
    echo "For example:"
    echo "./run-example --license-file license.json start rtmp_to_hls"
    echo "LICENSE_FILE=license.json ./run-example start rtmp_to_hls"
    echo
}

function dockerComposeCmd() {
    # Earlier version of docker-compose are called differently
    if ! docker compose >/dev/null 2>&1; then
        if ! docker-compose >/dev/null 2>&1; then
            echo ""
        else
            echo "docker-compose"
        fi
    else
        echo "docker compose"
    fi
}

function listExamples() {
    cat docker-compose/host-networking/*yml \
    | grep -e '^#' \
    | sed -e 's/# Norsk Media example: //' \
          -e 's/#/ /' \
          -e '/^[[:space:]]*$/d'
}

function startExample() {
    local -r exampleName=${1}
    local -r ymlPath=${2}
    local -r runSource=${3}
    local -r dockerComposeCmd=$(dockerComposeCmd)
    local candidate

    if [ -z "$dockerComposeCmd" ]; then
        echo "Error: Unable to find docker-compose - exiting"
        exit 1
    fi

    pushd "$ymlPath" >/dev/null
    case "$exampleName" in
        [0-9][0-9]) # User gave just the example number
            candidate=$(ls -1 "$1_"*".yml" 2>/dev/null || true | head -1)
        ;;
        [0-9][0-9]_*.yml) # Full match
            candidate=$(ls -1 "$1" 2>/dev/null || true | head -1)
        ;;
        [0-9][0-9]_*) # Full name of example (no extension)
            candidate=$(ls -1 "$1.yml" 2>/dev/null || true | head -1)
        ;;
        *)
            candidate=$(ls -1 [0-9][0-9]"_$1.yml" 2>/dev/null || true | head -1)
        ;;
    esac
    popd >/dev/null

    local -r dcFile="$ymlPath/$candidate"
    if [ ! -f "$dcFile" ]; then
        echo "Error: example not found $exampleName"
        exit 1
    fi

    mkdir -p "$LOG_ROOT/$candidate"
    mkdir -p "$OUTPUT_ROOT/$candidate"

    # Different versions of docker-compose treat paths inside yml files differently
    # (some consider paths relative to the yml file - other relative to where you run from)
    # As a result we copy the selected yml file to the current directory with the default
    # docker compose name (docker-compose.yml) so that the behaviour is the same for all
    # all versions. It's also convient for `docker compose down`
    rm -f docker-compose.yml
    cat "$dcFile" \
    | sed -e 's#${LICENSE_FILE}#'"$(realpath "$LICENSE_FILE")"'#g' \
          -e 's#${LOG_ROOT}#'"$(realpath "$LOG_ROOT/$candidate")"'#g' \
          -e 's#${OUTPUT_ROOT}#'"$(realpath "$OUTPUT_ROOT/$candidate")"'#g' \
          -e 's#${PUBLIC_URL_PREFIX}#'"$PUBLIC_URL_PREFIX"'#g' \
          -e 's#${DEBUG_URL_PREFIX}#'"$DEBUG_URL_PREFIX"'#g' \
          -e 's#${CLIENT_HOST}#'"$CLIENT_HOST"'#g' \
          -e 's#${DOCKER_UID}#'"$DOCKER_UID"'#g' \
          -e 's#${DOCKER_GID}#'"$DOCKER_GID"'#g' \
    | ( [[ "$runSource" == "false" ]] && awk 'BEGIN {flag=1}/.*\[Start of source\]/{flag=0; next} /.*\[End of source\]/{flag=1; next} flag' || cat ) \
    >docker-compose.yml

    echo "Starting example ${candidate%.*}"
    PUBLIC_URL_PREFIX=$PUBLIC_URL_PREFIX \
    $dockerComposeCmd up --build --detach

    if [[ "$runSource" == "false" ]]; then
        echo
        echo "Norsk and example running, source *not* started.  Example ffmpeg command lines for this example are:"
        grep '^\s*ffmpeg' "$dcFile" | sed -e 's/\/\/norsk/\/\/127.0.0.1/' -e 's/\/tmp\/data/data/'
        echo
    fi

    echo "Workflow visualiser URL $DEBUG_URL_PREFIX/visualiser"
    case "$ymlPath" in
        *"metrics")
            echo "Grafana URL $GRAFANA_URL/"
            echo
            ;;
        *)
            ;;
    esac
    echo
    echo "Output from ${candidate%.*} (ctrl-c to return to shell - this will not kill the containers!)"
    echo
    docker logs -f norsk-example-app
    echo
    exit 0
}

function stopExample() {
    local i
    local firstTime=true
    for i in $(docker ps --all --format '{{.Names}}' | grep -e ^norsk-) ; do
        if [ $firstTime == true ]; then
            echo "Stopping example containers:"
            firstTime=false
        fi
        # The sed is just to indent the output
        docker rm -f "$i" | sed 's/^/    /'
    done

    firstTime=true
    for i in $(docker network list --format '{{.Name}}' | grep -e ^norsk-nw) ; do
        if [ $firstTime  == true ]; then
            echo "Deleting network:"
            firstTime=false
        fi
        # The sed is just to indent the output
        docker network rm "$i" | sed 's/^/    /'
    done
}

function downloadMediaAssets() {
    MEDIA_ASSETS="Weaving.ts Weaving-stereo.ts InkDrop.ts InkDrop-stereo.ts TraditionalMusic.mp4"

    for i in $MEDIA_ASSETS
    do
        if [[ ! -f data/$i ]]; then
	        curl -q "https://s3.eu-west-1.amazonaws.com/norsk.video/media-examples/data/$i" > "data/$i"
        fi
    done
}

function main() {
    local ymlPath
    local dockerComposeCmd
    local addMetrics=false
    local addTurn=false
    local runSource=true

    declare -a positionalArguments
    positionalArguments=()

    # Defaults
    if [[ "$OSTYPE" == "linux"* ]]; then
        ymlPath="docker-compose/host-networking"
    else
        ymlPath="docker-compose/docker-networking"
        addTurn=true
    fi
    LOG_ROOT="norskLogs"
    OUTPUT_ROOT="norskOutput"

    if [ "$(id -u)" == "0" ]; then
        echo "Error: running as root is not supported. Please run as a non-root user."
        exit 1
    fi

    while [[ $# -gt 0 ]]; do
        case $1 in
            -h | --help) usage ; exit 0 ;;
            --license-file)
                export LICENSE_FILE="$2"
                shift 2
            ;;
            --log-root)
                # Remove trailing slash if present
                export LOG_ROOT=${2%/}
                shift 2
            ;;
            --network-mode)
                if [[ "$OSTYPE" == "linux"* ]]; then
                  case "$2" in
                      docker | host) ymlPath="docker-compose/$2-networking" ; shift 2 ;;
                      *) echo "Unknown network-mode $2"; usage ; exit 1 ;;
                  esac
                else
                    echo "network-mode is unsupported on $OSTYPE"; usage ; exit 1
                fi
            ;;
            --metrics)
                case "$2" in
                    true) addMetrics=true ; shift 2 ;;
                    false) addMetrics=false ; shift 2 ;;
                    *) echo "Unknown metrics flag $2"; usage ; exit 1 ;;
                esac
            ;;
            --turn)
                case "$2" in
                    true) addTurn=true ; shift 2 ;;
                    false) addTurn=false ; shift 2 ;;
                    *) echo "Unknown turn flag $2"; usage ; exit 1 ;;
                esac
            ;;
            --run-source)
                case "$2" in
                    true) runSource=true ; shift 2 ;;
                    false) runSource=false ; shift 2 ;;
                    *) echo "Unknown run-source flag $2"; usage ; exit 1 ;;
                esac
            ;;
            --uid)
                DOCKER_UID="$2"
                shift 2
                ;;
            --gid)
                DOCKER_GID="$2"
                shift 2
                ;;
            --) shift ; positionalArguments+=("$@") ; break ;;
            -*) echo "Error: Unknown option $1" ; usage ; exit 1 ;;
            *) positionalArguments+=("$1") ; shift ;;
        esac
    done
    set -- "${positionalArguments[@]}"
    if [[ $# -eq 1 ]]; then
        case "$1" in
            list)
                listExamples
                exit 0
            ;;
            stop)
                stopExample
                exit 0
            ;;
            *)
                echo "Error: Unknown command $1"
                usage
                exit 1
            ;;
        esac
    fi

    if [[ -z ${LICENSE_FILE+x} ]]; then
        usage
        exit 1
    fi
    if [[ ! -f ${LICENSE_FILE} ]]; then
        echo "License file not found: ${LICENSE_FILE}"
        exit 1
    fi

    if [[ "$addMetrics" == "true" ]]; then
        ymlPath="$ymlPath"-metrics
    fi

    if [[ "$addTurn" == "true" ]]; then
        ymlPath="$ymlPath"-turn
    fi

    if [[ $# -eq 2 ]]; then
        case "$1" in
            start)
                downloadMediaAssets
                echo "Stopping any current example"
                echo
                stopExample
                echo
                startExample "$2" "$ymlPath" "$runSource"
            ;;
            *)
                echo "Error: Unknown command $1"
                usage
                exit 1
            ;;
        esac
    else
        echo "Error: No valid command specified"
        usage
        exit 1
    fi
}

main "$@"
