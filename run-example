#!/usr/bin/env bash
set -eo pipefail
cd "${0%/*}"

declare LOG_ROOT
declare LICENSE_FILE

declare DOCKER_UID=${NORSK_UID:=$(id -u)}
declare DOCKER_GID=${NORSK_GID:=$(id -g)}

declare -r CONFIG_FILE="./.config"

declare CLIENT_HOST
declare PUBLIC_URL_PREFIX
declare DEBUG_URL_PREFIX
declare GRAFANA_URL

declare TURN_DEFAULT
declare NETWORK_MODE_DEFAULT

declare -r LOG_DEFAULT="norskLogs"
if [[ "$OSTYPE" == "linux"* ]]; then
    TURN_DEFAULT=none
    NETWORK_MODE_DEFAULT="host"
else
    TURN_DEFAULT=local
    NETWORK_MODE_DEFAULT="docker"
fi

function usage() {
    # TODO :)
    echo "Usage: run-example [options] cmd"
    echo "  Options:"
    echo "    --log-root <log-dir> : where on the host to mount Norsk's logs.  The actual logs will be in a subdirectory with the name of the example you are running.  Default $LOG_DEFAULT"
    if [[ "$OSTYPE" == "linux"* ]]; then
        echo "    --network-mode [docker|host] : whether the example should run in host or docker network mode.  Defaults to $NETWORK_MODE_DEFAULT"
    fi
    echo "    --metrics [true|false] : whether metrics containers are included. Defaults to false"
    echo "    --turn [none|public|local] : whether stun / turn is configured for WebRTC. See webRtcServerConfig.ts, but 'none' uses no stun / turn, public uses Google's public stun server and local (only supported in docker networking mode) spawns a local instance of coturn. Defaults to $TURN_DEFAULT"
    echo "    --run-source [true|false] : whether a source (or sources) are automatically started.  Defaults to true"
    echo "    --uid <uid> : the UID to run the as.  Defaults to the current user's UID"
    echo "    --gid <gid> : the GID to run the as.  Defaults to the current user's GID"
    echo "  Commands:"
    echo "    list : List the example names along with a short description of each"
    echo "    start <example-name> : start the named example."
    echo "        The example-name can be full (e.g. 00_hello_norsk), just the number (e.g. 00)"
    echo "        or just the name (e.g. hello_norsk)"
    echo "    stop : Stops all example containers and deletes the associated docker network (if any)"
    echo
    echo "  Config file: (./.config)"
    echo "    LICENSE_FILE - relative path to your Norsk license file"
    echo "    CLIENT_HOST - the IP used for public access to this Norsk application"
    echo
    echo "  Environment variables:"
    echo "    LICENSE_FILE - overrides the value in your config file"
    echo "    CLIENT_HOST - overrides the value in your config file"
    echo "    PUBLIC_URL_PREFIX - adjust the prefix applied to displayed public URLs (playlists etc). default: $PUBLIC_URL_PREFIX_DEFAULT"
    echo "    DEBUG_URL_PREFIX - adjust the prefix applied to displayed debug URLs (visualiser etc). default: $DEBUG_URL_PREFIX_DEFAULT"
    echo "    NORSK_UID - the value of --uid can alternatively be provided using this environment variable"
    echo "    NORSK_GID - the value of --gid can alternatively be provided using this environment variable"
    echo
    echo "For example:"
    echo "./run-example --license-file license.json start rtmp_to_hls"
    echo "LICENSE_FILE=license.json ./run-example start rtmp_to_hls"
    echo
}

function dockerComposeCmd() {
    # Earlier version of docker-compose are called differently
    if ! docker compose >/dev/null 2>&1; then
        if ! docker-compose >/dev/null 2>&1; then
            echo ""
        else
            echo "docker-compose"
        fi
    else
        echo "docker compose"
    fi
}

realpath() {
    local expanded="${1/#\~/$HOME}"
    echo "$(cd "$(dirname "$expanded")" && pwd)/$(basename "$expanded")"
}

read_config() {
    local license_path
    local abs_lp
    local ip_address
    local public_candidate
    if [[ ! -f "$CONFIG_FILE" ]]; then
        echo "This seems to be your first time running the Norsk examples."
        while [[ ! -f "$abs_lp" ]]; do
            read -e -p "Enter the path to your license file: " license_path
            abs_lp=$(realpath "$license_path")
            if [[ ! -f "$abs_lp" ]]; then
                echo "The specified license file does not exist. Please try again."
            fi
        done
        echo

        # Take a guess at our public and private IP addresses
        if [[ "$OSTYPE" == "darwin"* ]]; then
            echo "Running on a Mac - only 127.0.0.1 access supported"
            ip_address="127.0.0.1"
        else
            public_candidate=$(curl -s --max-time 1 ifconfig.me || true)

            echo "What IP address you will access the Norsk applications on?"
            echo "For local dev you probably want 127.0.0.1 and on the cloud you probably want your public IP address."
            if [[ -n "$public_candidate" ]]; then
                echo "  Your public IP address is $public_candidate"
                echo
            fi
            echo "  Local IP addresses:"
            (ip addr show 2>/dev/null || ifconfig) | grep 'inet ' | awk '{print "    "$2}' | sed 's#/.*##'
            echo
            read -p "Enter your IP address: " ip_address
        fi

        echo "LICENSE_FILE=$license_path" >"$CONFIG_FILE"
        echo "CLIENT_HOST=$ip_address" >>"$CONFIG_FILE"
        echo "Configuration saved."
        LICENSE_FILE=$license_path
        CLIENT_HOST=$ip_address
    else
        local -r ENV_LICENSE_FILE=${LICENSE_FILE:-}
        local -r ENV_CLIENT_HOST=${CLIENT_HOST:-}
        source "$CONFIG_FILE"
        if [[ -z "$LICENSE_FILE" || -z "$CLIENT_HOST" ]]; then
            echo "Configuration file incomplete. Restarting:"
            rm "$CONFIG_FILE"
            read_config
        else
            # Env variables have priority over the config file
            if [[ -n "$ENV_LICENSE_FILE" ]]; then
                LICENSE_FILE=$ENV_LICENSE_FILE
            fi
            if [[ -n "$ENV_CLIENT_HOST" ]]; then
                CLIENT_HOST=$ENV_CLIENT_HOST
            fi
            echo "Welcome back! Using license file $LICENSE_FILE and IP address $CLIENT_HOST"
        fi
    fi
}

function listExamples() {
    cat docker-compose/host-networking/*yml |
        grep -e '^#' |
        sed -e 's/# Norsk Media example: //' \
            -e 's/#/ /' \
            -e '/^[[:space:]]*$/d'
}

function startExample() {
    local -r exampleName=${1}
    local -r ymlPath=${2}
    local -r runSource=${3}
    local -r dockerComposeCmd=$(dockerComposeCmd)
    local candidate

    if [ -z "$dockerComposeCmd" ]; then
        echo "Error: Unable to find docker-compose - exiting"
        exit 1
    fi

    pushd "$ymlPath" >/dev/null
    case "$exampleName" in
    [0-9][0-9]) # User gave just the example number
        candidate=$(ls -1 "$1_"*".yml" 2>/dev/null || true | head -1)
        ;;
    [0-9][0-9]_*.yml) # Full match
        candidate=$(ls -1 "$1" 2>/dev/null || true | head -1)
        ;;
    [0-9][0-9]_*) # Full name of example (no extension)
        candidate=$(ls -1 "$1.yml" 2>/dev/null || true | head -1)
        ;;
    *)
        candidate=$(ls -1 [0-9][0-9]"_$1.yml" 2>/dev/null || true | head -1)
        ;;
    esac
    popd >/dev/null

    local -r dcFile="$ymlPath/$candidate"
    if [ ! -f "$dcFile" ]; then
        echo "Error: example not found $exampleName"
        exit 1
    fi

    candidate=${candidate%.*}

    mkdir -p "$LOG_ROOT/$candidate"
    mkdir -p "$OUTPUT_ROOT/$candidate"

    # Different versions of docker-compose treat paths inside yml files differently
    # (some consider paths relative to the yml file - other relative to where you run from)
    # As a result we copy the selected yml file to the current directory with the default
    # docker compose name (docker-compose.yml) so that the behaviour is the same for all
    # all versions. It's also convient for `docker compose down`
    rm -f docker-compose.yml
    cat "$dcFile" |
        sed -e 's#${LICENSE_FILE}#'"$(realpath "$LICENSE_FILE")"'#g' \
            -e 's#${LOG_ROOT}#'"$(realpath "$LOG_ROOT/$candidate")"'#g' \
            -e 's#${OUTPUT_ROOT}#'"$(realpath "$OUTPUT_ROOT/$candidate")"'#g' \
            -e 's#${PUBLIC_URL_PREFIX}#'"$PUBLIC_URL_PREFIX"'#g' \
            -e 's#${DEBUG_URL_PREFIX}#'"$DEBUG_URL_PREFIX"'#g' \
            -e 's#${CLIENT_HOST}#'"$CLIENT_HOST"'#g' \
            -e 's#${TURN_MODE}#'"$turnMode"'#g' \
            -e 's#${DOCKER_UID}#'"$DOCKER_UID"'#g' \
            -e 's#${DOCKER_GID}#'"$DOCKER_GID"'#g' |
        ([[ "$runSource" == "false" ]] && awk 'BEGIN {flag=1}/.*\[Start of source\]/{flag=0; next} /.*\[End of source\]/{flag=1; next} flag' || cat) \
            >docker-compose.yml

    echo "Building..."
    $dockerComposeCmd build

    echo
    echo "Starting example $candidate":
    echo

    PUBLIC_URL_PREFIX=$PUBLIC_URL_PREFIX \
        $dockerComposeCmd up --detach

    if [[ "$runSource" == "false" ]]; then
        echo
        echo "Norsk and example running, source *not* started.  Example ffmpeg command lines for this example are:"
        grep '^\s*ffmpeg' "$dcFile" | sed -e 's/\/\/norsk/\/\/127.0.0.1/' -e 's/\/tmp\/data/data/'
        echo
    fi

    echo "Workflow visualiser URL $DEBUG_URL_PREFIX/visualiser"
    case "$ymlPath" in
    *"metrics")
        echo "Grafana URL $GRAFANA_URL/"
        echo
        ;;
    *) ;;
    esac
    echo
    echo "Output from ${candidate%.*} (ctrl-c to return to shell - this will not kill the containers!)"
    echo
    docker logs -f norsk-example-app
    echo
    exit 0
}

function stopExample() {
    local i
    local firstTime=true
    for i in $(docker ps --all --format '{{.Names}}' | grep -e ^norsk-); do
        if [ $firstTime == true ]; then
            echo "Stopping example containers:"
            firstTime=false
        fi
        # The sed is just to indent the output
        docker rm -f "$i" | sed 's/^/    /'
    done

    firstTime=true
    for i in $(docker network list --format '{{.Name}}' | grep -e ^norsk-nw); do
        if [ $firstTime == true ]; then
            echo "Deleting network:"
            firstTime=false
        fi
        # The sed is just to indent the output
        docker network rm "$i" | sed 's/^/    /'
    done
}

function downloadMediaAssets() {
    MEDIA_ASSETS="Weaving.ts Weaving-stereo.ts InkDrop.ts InkDrop-stereo.ts TraditionalMusic.mp4"

    for i in $MEDIA_ASSETS; do
        if [[ ! -f data/$i ]]; then
            curl -q "https://s3.eu-west-1.amazonaws.com/norsk.video/media-examples/data/$i" >"data/$i"
        fi
    done
}

function main() {
    local ymlPath
    local dockerComposeCmd
    local addMetrics=false
    local turnMode="$TURN_DEFAULT"
    local networkMode="$NETWORK_MODE_DEFAULT"
    local runSource=true

    read_config

    PUBLIC_URL_PREFIX=${PUBLIC_URL_PREFIX:-"http://${CLIENT_HOST}:8080"}
    DEBUG_URL_PREFIX=${DEBUG_URL_PREFIX:-"http://${CLIENT_HOST}:6791"}
    GRAFANA_URL=${GRAFANA_URL:-"http://${CLIENT_HOST}:3100"}

    ymlPath="docker-compose/$NETWORK_MODE_DEFAULT-networking"

    declare -a positionalArguments
    positionalArguments=()

    LOG_ROOT="$LOG_DEFAULT"
    OUTPUT_ROOT="norskOutput"

    if [ "$(id -u)" == "0" ]; then
        echo "Error: running as root is not supported. Please run as a non-root user."
        exit 1
    fi

    while [[ $# -gt 0 ]]; do
        case $1 in
        -h | --help)
            usage
            exit 0
            ;;
        --log-root)
            # Remove trailing slash if present
            export LOG_ROOT=${2%/}
            shift 2
            ;;
        --network-mode)
            if [[ "$OSTYPE" == "linux"* ]]; then
                case "$2" in
                docker | host)
                    local networkMode="$2"
                    ymlPath="docker-compose/$2-networking"
                    shift 2
                    ;;
                *)
                    echo "Unknown network-mode $2"
                    usage
                    exit 1
                    ;;
                esac
            else
                echo "network-mode is unsupported on $OSTYPE"
                usage
                exit 1
            fi
            ;;
        --metrics)
            case "$2" in
            true)
                addMetrics=true
                shift 2
                ;;
            false)
                addMetrics=false
                shift 2
                ;;
            *)
                echo "Unknown metrics flag $2"
                usage
                exit 1
                ;;
            esac
            ;;
        --turn)
            case "$2" in
            local | none | public)
                turnMode=$2
                shift 2
                ;;
            *)
                echo "Unknown turn flag $2"
                usage
                exit 1
                ;;
            esac
            ;;
        --run-source)
            case "$2" in
            true)
                runSource=true
                shift 2
                ;;
            false)
                runSource=false
                shift 2
                ;;
            *)
                echo "Unknown run-source flag $2"
                usage
                exit 1
                ;;
            esac
            ;;
        --uid)
            DOCKER_UID="$2"
            shift 2
            ;;
        --gid)
            DOCKER_GID="$2"
            shift 2
            ;;
        --)
            shift
            positionalArguments+=("$@")
            break
            ;;
        -*)
            echo "Error: Unknown option $1"
            usage
            exit 1
            ;;
        *)
            positionalArguments+=("$1")
            shift
            ;;
        esac
    done
    set -- "${positionalArguments[@]}"
    if [[ $# -eq 1 ]]; then
        case "$1" in
        list)
            listExamples
            exit 0
            ;;
        stop)
            stopExample
            exit 0
            ;;
        *)
            echo "Error: Unknown command $1"
            usage
            exit 1
            ;;
        esac
    fi

    if [[ -z ${LICENSE_FILE+x} ]]; then
        usage
        exit 1
    fi
    if [[ ! -f ${LICENSE_FILE} ]]; then
        echo "License file not found: ${LICENSE_FILE}"
        exit 1
    fi

    if [[ "$addMetrics" == "true" ]]; then
        ymlPath="$ymlPath"-metrics
    fi

    if [[ "$turnMode" == "local" ]]; then
        ymlPath="$ymlPath"-turn
    fi

    if [[ $# -eq 2 ]]; then
        case "$1" in
        start)
            # Make sure we don't have both host networking and local turn requested
            if [[ "$turnMode" == "local" && "$networkMode" == "host" ]] ; then
                echo "Local turn servers are only supported in docker networking"
                usage
                exit 1
            fi
            downloadMediaAssets
            echo "Stopping any current example"
            echo
            stopExample
            echo
            startExample "$2" "$ymlPath" "$runSource"
            ;;
        *)
            echo "Error: Unknown command $1"
            usage
            exit 1
            ;;
        esac
    else
        echo "Error: No valid command specified"
        usage
        exit 1
    fi
}

main "$@"
